{% extends "AppBundle::base.html.twig" %}

{% form_theme form with ['AppBundle:Order:order_fields.html.twig'] %}

{% block body %}
<div class="container">

  <div class="row">

    <div class="col-xs-12">

      <div class="page-header">
        <h2>Ma commande</h2>
      </div>

      {% include 'AppBundle:Order:breadcrumb.html.twig' %}

      {% if cart %}

      <form method="post">

        <div class="list-group">
          {% for item in cart.items %}
          <a href="#" class="list-group-item js-add-to-cart" data-product-id="{{ item.id }}">
            {{ item.name }} x {{ item.quantity }}
            <span class="pull-right">{{ item.price * item.quantity }} €</span>
          </a>
          {% endfor %}
        </div>

        <div>
          <strong>Total : {{ cart.total }} €</strong>
        </div>

        <hr>

        <h3>Choisissez une adresse de livraison</h3>

        {{ form_start(form) }}
          {% if not hasDeliveryAddress %}<div class="hidden">{% endif %}
          {{ form_widget(form.createDeliveryAddress) }}
          <hr>
          {% if not hasDeliveryAddress %}</div>{% endif %}

          {% if form.createDeliveryAddress.vars.value %}
            {{ form_widget(form.deliveryAddress) }}
          {% else %}
            {{ form_widget(form.deliveryAddress) }}
          {% endif %}
          <hr>
          {{ form_widget(form.save, { attr: { class: 'btn-primary btn-block' } }) }}
        {{ form_end(form) }}

      </form>

      {% else %}

      Pas de commande en cours.

      {% endif %}

    </div>

  </div>
</div>
{% endblock %}

{% block scripts %}

<script type="text/javascript">

var inputMap = {
  postal_code: 'order_deliveryAddress_postalCode',
  locality: 'order_deliveryAddress__addressLocality'
};

var placeChangedListener;

function initMap() {
  var addressInput = document.getElementById('order_deliveryAddress_streetAddress');
  var latitudeInput = document.getElementById('order_deliveryAddress_latitude');
  var longitudeInput = document.getElementById('order_deliveryAddress_longitude');

  if (!addressInput) {
    return;
  }

  var options = {
    componentRestrictions: {
      country: "fr"
    }
  };

  if (placeChangedListener) {
    google.maps.event.removeListener(placeChangedListener);
  }

  var autocomplete = new google.maps.places.Autocomplete(addressInput, options);

  placeChangedListener = autocomplete.addListener('place_changed', function() {
    var place = autocomplete.getPlace();
    latitudeInput.value = place.geometry.location.lat();
    longitudeInput.value = place.geometry.location.lng();
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      var value = place.address_components[i].long_name;
      if (inputMap[addressType]) {
        $('#' + inputMap[addressType]).val(value);
      }
    }
  });
}

(function() {

  $('input[name="order[createDeliveryAddress]"]').on('change', function(e) {
    var $form = $(this).closest('form');
    var data = {};
    data[$(this).attr('name')] = $(this).val();
    $.ajax({
      url : $form.attr('action'),
      type: $form.attr('method'),
      data : data,
      success: function(html) {
        var $content = $(html).find('#order_deliveryAddress');
        $('#order_deliveryAddress').replaceWith($content);
        initMap();
      }
    });
  });

})()
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCAqNf8X0elLLXv5yeh0btsYpq47eCzIAw&signed_in=true&libraries=places&callback=initMap"
  async defer></script>
{% endblock %}